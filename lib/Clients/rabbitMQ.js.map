{"version":3,"sources":["../../src/Clients/rabbitMQ.js"],"names":["Client","config","consumeMessageCallback","_consumeMessage","bind","_createQueues","consumeType","removeType","publish","send","_getHeaders","_processMessage","close","options","amqpSettings","ssl","connect","host","err","conn","events","error","connection","createChannel","channel","console","info","queue","name","assertQueue","durable","exclusive","autoDelete","key","handlers","type","replace","assertExchange","bindQueue","deadLetterExchange","retryQueue","arguments","retryDelay","errorQueue","auditEnabled","auditQueue","consume","noAck","connected","unbindQueue","endpoint","message","headers","endpoints","Array","isArray","map","messageHeaders","ep","sendToQueue","Buffer","JSON","stringify","messageId","MessageId","messageType","DestinationAddress","MessageType","SourceAddress","TimeSent","Date","toISOString","TypeName","ConsumerType","Language","rawMessage","properties","ack","result","TimeReceived","DestinationMachine","hostname","parse","content","toString","TimeProcessed","success","ex","exception","retryCount","RetryCount","undefined","maxRetries","Exception","deleteQueue"],"mappings":"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","file":"rabbitMQ.js","sourcesContent":["import {mergeDeep, guid} from '../utils';\r\nimport amqp from 'amqplib/callback_api';\r\nimport os from 'os';\r\n\r\n/** Class representing the rabbitMQ client. */\r\nexport default class Client {\r\n\r\n    /**\r\n     * Sets config and connects to RabbitMQ\r\n     * @constructor\r\n     * @param  {Object} config\r\n     * @param (function) consumeMessageCallback\r\n     */\r\n    constructor(config, consumeMessageCallback){\r\n        this.config = config;\r\n        this.consumeMessageCallback = consumeMessageCallback;\r\n        this._consumeMessage = this._consumeMessage.bind(this);\r\n        this._createQueues = this._createQueues.bind(this);\r\n        this.consumeType = this.consumeType.bind(this);\r\n        this.removeType = this.removeType.bind(this);\r\n        this.publish = this.publish.bind(this);\r\n        this.send = this.send.bind(this);\r\n        this.publish = this.publish.bind(this);\r\n        this._getHeaders = this._getHeaders.bind(this);\r\n        this._consumeMessage = this._consumeMessage.bind(this);\r\n        this._processMessage = this._processMessage.bind(this);\r\n        this.close = this.close.bind(this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * Creates connection, creates channel and then sets up RabbitMQ queues and exchanges.\r\n     */\r\n    connect(){\r\n        var options = {};\r\n        if (this.config.amqpSettings.ssl) {\r\n            options = mergeDeep(options, this.config.amqpSettings.ssl);\r\n        }\r\n\r\n        amqp.connect(this.config.amqpSettings.host, options, (err, conn) => {\r\n            if (err){\r\n                this.config.events.error(err);\r\n                return;\r\n            }\r\n            this.connection = conn;\r\n            this.connection.createChannel((err, channel) => {\r\n                if (err){\r\n                    this.config.events.error(err);\r\n                    return;\r\n                }\r\n                this.channel = channel;\r\n                this._createQueues();\r\n            })\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates host queue, retry queue and error queue.  It then sets up handler mappings and begins consuming messages.\r\n     * The connected event is fired after consuming has begun.\r\n     */\r\n    _createQueues(){\r\n        console.info(\"Connection ready\");\r\n        console.info(\"Creating queue \" + this.config.amqpSettings.queue.name);\r\n\r\n        // create queue\r\n        this.channel.assertQueue(this.config.amqpSettings.queue.name,  {\r\n            durable: this.config.amqpSettings.queue.durable,\r\n            exclusive: this.config.amqpSettings.queue.exclusive,\r\n            autoDelete: this.config.amqpSettings.queue.autoDelete\r\n        });\r\n        console.info(this.config.amqpSettings.queue.name + \" queue created.\");\r\n\r\n        // bind queue to message types\r\n        for(var key in this.config.handlers){\r\n            let type = key.replace(/\\./g, \"\");\r\n\r\n            this.channel.assertExchange(type, 'fanout', {\r\n                durable: true\r\n            });\r\n\r\n            this.channel.bindQueue(this.config.amqpSettings.queue.name, type, '');\r\n\r\n            console.info(\"Bound \" + this.config.amqpSettings.queue.name + \" to exchange \" + key);\r\n        }\r\n\r\n        // Create dead letter exchange\r\n        let deadLetterExchange = this.config.amqpSettings.queue.name + \".Retries.DeadLetter\";\r\n        this.channel.assertExchange(deadLetterExchange, 'fanout', {\r\n            durable: true\r\n        });\r\n\r\n        // Create retry queue\r\n        let retryQueue = this.config.amqpSettings.queue.name + \".Retries\";\r\n        console.info(\"Creating queue \" + retryQueue);\r\n        this.channel.assertQueue(retryQueue,  {\r\n            durable: this.config.amqpSettings.queue.durable,\r\n            arguments: {\r\n                \"x-dead-letter-exchange\": deadLetterExchange,\r\n                \"x-message-ttl\": this.config.amqpSettings.retryDelay\r\n            }\r\n        });\r\n\r\n        console.info(retryQueue + \" queue created.\");\r\n        this.channel.bindQueue(this.config.amqpSettings.queue.name, deadLetterExchange, '');\r\n\r\n        // configure error exchange\r\n        this.channel.assertExchange(this.config.amqpSettings.errorQueue, 'direct', {\r\n            durable: true\r\n        });\r\n\r\n        // create error queue\r\n        console.info(\"Creating queue \" + this.config.amqpSettings.errorQueue);\r\n        this.channel.assertQueue(this.config.amqpSettings.errorQueue,  {\r\n            durable: true,\r\n            autoDelete: false\r\n        });\r\n\r\n        console.info(this.config.amqpSettings.errorQueue + \" queue created.\");\r\n\r\n        if (this.config.amqpSettings.auditEnabled)\r\n        {\r\n            // configure audit exchange\r\n            this.channel.assertExchange(this.config.amqpSettings.auditQueue, 'direct', {\r\n                durable: true\r\n            });\r\n\r\n            // create error audit\r\n            console.info(\"Creating queue \" + this.config.amqpSettings.auditQueue);\r\n            this.channel.assertQueue(this.config.amqpSettings.auditQueue,  {\r\n                durable: true,\r\n                autoDelete: false\r\n            });\r\n        }\r\n\r\n        this.channel.consume(this.config.amqpSettings.queue.name, this._consumeMessage, {\r\n            noAck: this.config.amqpSettings.queue.noAck\r\n        });\r\n\r\n        this.config.events.connected();\r\n    }\r\n\r\n    /**\r\n     * Starts consuming the message type.  Creates a durable exchange named @message of type fanout.\r\n     * Binds the clients queue to the exchange.\r\n     * @param {String} message\r\n     * @param  {Function} callback\r\n     */\r\n    consumeType(type){\r\n        this.channel.assertExchange(type, 'fanout', {\r\n            durable: true\r\n        });\r\n        this.channel.bindQueue(this.config.amqpSettings.queue.name, type, '');\r\n    }\r\n\r\n    /**\r\n     * Stops listening for the message.  Unbinds the exchange named @type from the client queue.\r\n     * @param {String} type\r\n     */\r\n    removeType(type){\r\n        this.channel.unbindQueue(this.config.amqpSettings.queue.name, type);\r\n    }\r\n\r\n    /**\r\n     * Sends a command to the specified endpoint(s).\r\n     * @param {String|Array} endpoint\r\n     * @param  {String} type\r\n     * @param  {Object} message\r\n     * @param  {Object|undefined} headers\r\n     */\r\n    send(endpoint, type, message, headers = {}) {\r\n        let endpoints = Array.isArray(endpoint) ? endpoint : [endpoint];\r\n        endpoints.map(ep => {\r\n            let messageHeaders = this._getHeaders(type, headers, ep, \"Send\");\r\n            this.channel.sendToQueue(ep, new Buffer(JSON.stringify(message), \"utf-8\"), { headers: messageHeaders, messageId: messageHeaders.MessageId });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Published an event of the specified type.\r\n     * @param  {String} type\r\n     * @param  {Object} message\r\n     * @param  {Object|undefined} headers\r\n     */\r\n    publish(type, message, headers = {}){\r\n        let messageHeaders = this._getHeaders(type, headers, this.config.amqpSettings.queue.name, \"Publish\");\r\n        this.channel.assertExchange(type.replace(/\\./g, \"\"), 'fanout', {\r\n            durable: true\r\n        });\r\n        this.channel.publish(type.replace(/\\./g, \"\"), '', new Buffer(JSON.stringify(message), \"utf-8\"), { headers: messageHeaders, messageId: messageHeaders.MessageId });\r\n    }\r\n\r\n    /**\r\n     * Creates a object containing the standard message headers that need to be sent with all messages.\r\n     * @param  {String} type\r\n     * @param  {Object} headers\r\n     * @param  {String} queue\r\n     * @param  {String} messageType\r\n     * @return  {Object} headers\r\n     */\r\n    _getHeaders(type, headers, queue, messageType){\r\n        headers = mergeDeep({}, headers || {});\r\n        if (!headers.DestinationAddress) headers.DestinationAddress = queue;\r\n        if (!headers.MessageId) headers.MessageId = guid();\r\n        if (!headers.MessageType) headers.MessageType = messageType;\r\n        if (!headers.SourceAddress) headers.SourceAddress = this.config.amqpSettings.queue.name;\r\n        if (!headers.TimeSent) headers.TimeSent = new Date().toISOString();\r\n        if (!headers.TypeName) headers.TypeName = type;\r\n        if (!headers.ConsumerType) headers.ConsumerType = 'RabbitMQ';\r\n        if (!headers.Language) headers.Language = 'Javascript';\r\n        return headers;\r\n    }\r\n\r\n    /**\r\n     * Callback called by RabbitMQ when consuming a message.  Calls the consumeMessage callback passed into the client\r\n     * constructor.  If there is an exception the message is sent to the retry queue.  If an exception occurs and the\r\n     * message has been retried the max number of times then the message is sent to the error queue.  If auditing is\r\n     * enabled a copy of the message is sent to the audit queue. Acks the message at the end if noAck is false.\r\n     * @param  {Object} rawMessage\r\n     */\r\n    _consumeMessage(rawMessage){\r\n        try {\r\n            if (!rawMessage.properties.headers.TypeName){\r\n                this.config.events.error({ error: \"Message does not contain TypeName\", message: rawMessage});\r\n                throw {\r\n                    error: \"Message does not contain TypeName\",\r\n                    message: rawMessage\r\n                }\r\n            }\r\n            this._processMessage(rawMessage)\r\n        } finally {\r\n            if(!this.config.amqpSettings.queue.noAck){\r\n                this.channel.ack(rawMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Processes the RabbitMQ message.  Calls the consumeMessage callback passed into the client\r\n     * constructor.  If there is an exception the message is sent to the retry queue.  If an exception occurs and the\r\n     * message has been retried the max number of times then the message is sent to the error queue.  If auditing is\r\n     * enabled a copy of the message is sent to the audit queue.\r\n     * @param  {Object} rawMessage\r\n     */\r\n    _processMessage(rawMessage){\r\n        let result;\r\n\r\n        try {\r\n            rawMessage.properties.headers.TimeReceived = new Date().toISOString();\r\n            rawMessage.properties.headers.DestinationMachine = os.hostname();\r\n            rawMessage.properties.headers.DestinationAddress = this.config.amqpSettings.queue.name;\r\n\r\n            let message = JSON.parse(rawMessage.content.toString());\r\n\r\n            result = this.consumeMessageCallback(\r\n                message,\r\n                rawMessage.properties.headers,\r\n                rawMessage.properties.headers.TypeName);\r\n\r\n            rawMessage.properties.headers.TimeProcessed = new Date().toISOString();\r\n\r\n            // forward to audit queue is audit is enabled\r\n            if(result.success && this.config.amqpSettings.auditEnabled) {\r\n                this.channel.sendToQueue(\r\n                    this.config.amqpSettings.auditQueue,\r\n                    rawMessage.content,\r\n                    {\r\n                        headers: rawMessage.properties.headers,\r\n                        messageId: rawMessage.properties.messageId\r\n                    });\r\n            }\r\n\r\n        } catch(ex) {\r\n            result = {\r\n                exception: ex,\r\n                success: false\r\n            };\r\n        }\r\n\r\n        if(!result.success) {\r\n            let retryCount = 0;\r\n            if(rawMessage.properties.headers.RetryCount !== undefined){\r\n                retryCount = rawMessage.properties.headers.RetryCount;\r\n            }\r\n\r\n            if (retryCount < this.config.amqpSettings.maxRetries){\r\n                retryCount++;\r\n                rawMessage.properties.headers.RetryCount = retryCount;\r\n                this.channel.sendToQueue(\r\n                    this.config.amqpSettings.queue.name + \".Retries\",\r\n                    rawMessage.content,\r\n                    {\r\n                        headers: rawMessage.properties.headers,\r\n                        messageId: rawMessage.properties.messageId\r\n                    });\r\n            } else {\r\n                rawMessage.properties.headers.Exception = result.exception;\r\n                this.channel.sendToQueue(\r\n                    this.config.amqpSettings.errorQueue,\r\n                    rawMessage.content,\r\n                    {\r\n                        headers: rawMessage.properties.headers,\r\n                        messageId: rawMessage.properties.messageId\r\n                    });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Closes RabbitMQ channel.\r\n     */\r\n    close(){\r\n        console.info(\"Closing Bus\");\r\n        if(this.config.amqpSettings.queue.autoDelete){\r\n            this.channel.deleteQueue(this.config.amqpSettings.queue.name + \".Retries\");\r\n        }\r\n        this.channel.close();\r\n    }\r\n}"]}