{"version":3,"sources":["../src/index.js"],"names":["Bus","config","_consumeMessage","bind","on","off","send","publish","_processHandlers","_createClient","client","connect","message","callback","type","replace","consumeType","handlers","push","filter","c","undefined","length","removeType","endpoint","headers","result","ex","exception","success","map","handler","e","events","error","close"],"mappings":"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","file":"index.js","sourcesContent":["import settings from './settings';\r\nimport {mergeDeep} from './utils';\r\n\r\n/** Class representing a the message bus. */\r\nexport class Bus {\r\n\r\n    /**\r\n     * Sets config and creates client\r\n     * @constructor\r\n     * @param  {Object} config\r\n     */\r\n    constructor(config) {\r\n        this.config = mergeDeep(settings, config);\r\n        this._consumeMessage = this._consumeMessage.bind(this);\r\n        this.on = this.on.bind(this);\r\n        this.off = this.off.bind(this);\r\n        this.send = this.send.bind(this);\r\n        this.publish = this.publish.bind(this);\r\n        this._processHandlers = this._processHandlers.bind(this);\r\n        this._createClient();\r\n    }\r\n\r\n    /**\r\n     * Creates AMQP client and fires connected event when client has connected\r\n     */\r\n    _createClient() {\r\n        this.client = new this.config.client(this.config, this._consumeMessage);\r\n        this.client.connect();\r\n    }\r\n\r\n    /**\r\n     * Starts consuming the message type and binds the callback to the message type.\r\n     * @param {String} message\r\n     * @param  {Function} callback\r\n     */\r\n    on(message, callback){\r\n        var type = message.replace(/\\./g, \"\");\r\n        this.client.consumeType(type);\r\n        this.config.handlers[message] = this.config.handlers[message] || [];\r\n        this.config.handlers[message].push(callback);\r\n    }\r\n\r\n    /**\r\n     * Removes the message type callback binding and stops listening for the message if there are no more callback\r\n     * bindings.\r\n     * @param {String} message\r\n     * @param  {Function} callback\r\n     */\r\n    off(message, callback){\r\n        this.config.handlers[message] = this.config\r\n                                            .handlers[message]\r\n                                            .filter(c => c !== callback);\r\n\r\n        if (this.config.handlers[message] === undefined || this.config.handlers[message].length === 0){\r\n            this.client.removeType(message.replace(/\\./g, \"\"));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the message type is being handled by the Bus.\r\n     * @param {String} message\r\n     * @return {Boolean}\r\n     */\r\n    isHandled(message) {\r\n        return this.config.handlers[message] !== undefined && this.config.handlers[message].length !== 0;\r\n    }\r\n\r\n    /**\r\n     * Sends a command to the specified endpoint(s).\r\n     * @param {String|Array} endpoint\r\n     * @param  {String} type\r\n     * @param  {Object} message\r\n     * @param  {Object|undefined} headers\r\n     */\r\n    send(endpoint, type, message, headers = {}){\r\n        this.client.send(endpoint, type, message, headers);\r\n    }\r\n\r\n    /**\r\n     * Published an event of the specified type.\r\n     * @param  {String} type\r\n     * @param  {Object} message\r\n     * @param  {Object|undefined} headers\r\n     */\r\n    publish(type, message, headers = {}){\r\n        this.client.publish(type, message, headers);\r\n    }\r\n\r\n    /**\r\n     * Callback called when consuming a message.  Calls handler callbacks.\r\n     * @param  {Object} message\r\n     * @param  {Object} headers\r\n     * @param  {Object} type\r\n     * @return  {Object} result\r\n     */\r\n    _consumeMessage(message, headers, type){\r\n        let result;\r\n        try {\r\n            result = this._processHandlers(message, headers, type);\r\n        } catch(ex) {\r\n            result = {\r\n                exception: ex,\r\n                success: false\r\n            };\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Finds all handlers interested in the message type and calls handler callback function.\r\n     * @param  {Object} message\r\n     * @param  {Object} headers\r\n     * @param  {String} type\r\n     * @return {Object} result\r\n     */\r\n    _processHandlers(message, headers, type) {\r\n        var handlers = this.config.handlers[type],\r\n            result = { success: true };\r\n        if (handlers){\r\n            handlers.map(handler => {\r\n                try {\r\n                    handler(message, headers, type);\r\n                } catch(e) {\r\n                    result.success = false;\r\n                    result.exception = e;\r\n                    this.config.events.error(e);\r\n                }\r\n            });\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Disposes of Bus resources.\r\n     */\r\n    close(){\r\n        this.client.close();\r\n    }\r\n}"]}