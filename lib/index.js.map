{"version":3,"sources":["../src/index.js"],"names":["Bus","config","_consumeMessage","bind","addHandler","removeHandler","send","publish","_processHandlers","isHandled","on","console","log","requestReplyCallbacks","cb","client","connect","emit","ex","message","callback","type","replace","consumeType","handlers","push","filter","c","undefined","length","removeType","endpoint","headers","messageId","endpoints","Array","isArray","endpointCount","processedCount","expected","timeout","setTimeout","clearTimeout","result","success","_processRequestReplies","e","exception","replyCallback","_getReplyCallback","map","handler","configuration","close"],"mappings":"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","file":"index.js","sourcesContent":["import settings from './settings';\r\nimport {mergeDeep, guid} from './utils';\r\nimport EventEmitter from 'events';\r\n\r\n/** Class representing a the message bus. */\r\nexport class Bus extends EventEmitter {\r\n\r\n    /**\r\n     * Sets config and creates client\r\n     * @constructor\r\n     * @param  {Object} config\r\n     */\r\n    constructor(config) {\r\n        super();\r\n        this.config = mergeDeep(settings, config);\r\n        this._consumeMessage = this._consumeMessage.bind(this);\r\n        this.addHandler = this.addHandler.bind(this);\r\n        this.removeHandler = this.removeHandler.bind(this);\r\n        this.send = this.send.bind(this);\r\n        this.publish = this.publish.bind(this);\r\n        this._processHandlers = this._processHandlers.bind(this);\r\n        this.isHandled = this.isHandled.bind(this);\r\n        this.on('error', console.log);\r\n        this.requestReplyCallbacks = {};\r\n    }\r\n\r\n    /**\r\n     * Creates AMQP client and fires connected event when client has connected\r\n     */\r\n    init(cb) {\r\n        this.client = new this.config.client(this.config, this._consumeMessage);\r\n        this.client.connect();\r\n        this.client.on(\"connected\", () => {\r\n            this.emit(\"connected\");\r\n            if(cb) cb();\r\n        });\r\n        this.client.on(\"error\", ex => this.emit(\"error\", ex));\r\n    }\r\n\r\n    /**\r\n     * Starts consuming the message type and binds the callback to the message type.\r\n     * @param {String} message\r\n     * @param  {Function} callback\r\n     */\r\n    addHandler(message, callback){\r\n        var type = message.replace(/\\./g, \"\");\r\n        if(type !== \"*\"){\r\n            this.client.consumeType(type);\r\n        }\r\n        this.config.handlers[message] = this.config.handlers[message] || [];\r\n        this.config.handlers[message].push(callback);\r\n    }\r\n\r\n    /**\r\n     * Removes the message type callback binding and stops listening for the message if there are no more callback\r\n     * bindings.\r\n     * @param {String} message\r\n     * @param  {Function} callback\r\n     */\r\n    removeHandler(message, callback){\r\n        if (this.config.handlers[message]){\r\n            this.config.handlers[message] = this.config\r\n                .handlers[message]\r\n                .filter(c => c !== callback);\r\n\r\n            if (message !== \"*\" && (this.config.handlers[message] === undefined ||\r\n                                    this.config.handlers[message].length === 0)){\r\n                this.client.removeType(message.replace(/\\./g, \"\"));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the message type is being handled by the Bus.\r\n     * @param {String} message\r\n     * @return {Boolean}\r\n     */\r\n    isHandled(message) {\r\n        return this.config.handlers[message] !== undefined && this.config.handlers[message].length !== 0;\r\n    }\r\n\r\n    /**\r\n     * Sends a command to the specified endpoint(s).\r\n     * @param {String|Array} endpoint\r\n     * @param  {String} type\r\n     * @param  {Object} message\r\n     * @param  {Object|undefined} headers\r\n     */\r\n    send(endpoint, type, message, headers = {}){\r\n        this.client.send(endpoint, type, message, headers);\r\n    }\r\n\r\n    /**\r\n     * Published an event of the specified type.\r\n     * @param  {String} type\r\n     * @param  {Object} message\r\n     * @param  {Object|undefined} headers\r\n     */\r\n    publish(type, message, headers = {}){\r\n        this.client.publish(type, message, headers);\r\n    }\r\n\r\n    /**\r\n     * Sends a command to the specified endpoint(s) and waits for one or more replies.\r\n     * The method behaves like a regular blocking RPC method.\r\n     * @param {string|Array} endpoint\r\n     * @param {string} type\r\n     * @param {Object} message\r\n     * @param {function} callback\r\n     * @param {Object|undefined} headers\r\n     */\r\n    sendRequest(endpoint, type, message, callback, headers ={}){\r\n        var messageId = guid();\r\n\r\n        let endpoints = Array.isArray(endpoint) ? endpoint : [endpoint];\r\n\r\n        this.requestReplyCallbacks[messageId] = {\r\n            endpointCount: endpoints.length,\r\n            processedCount: 0,\r\n            callback\r\n        };\r\n        headers[\"RequestMessageId\"] = messageId;\r\n        this.client.send(endpoint, type, message, headers);\r\n    }\r\n\r\n    /**\r\n     * Publishes an event and wait for replies.\r\n     * @param {string} type\r\n     * @param {Object} message\r\n     * @param {function} callback\r\n     * @param {int|null} expected\r\n     * @param {int|null} timeout\r\n     * @param {Object|null} headers\r\n     */\r\n    publishRequest(type, message, callback, expected = null, timeout = 10000, headers ={}){\r\n        var messageId = guid();\r\n\r\n        this.requestReplyCallbacks[messageId] = {\r\n            endpointCount: expected === null ? -1 : expected,\r\n            processedCount: 0,\r\n            callback\r\n        };\r\n        headers[\"RequestMessageId\"] = messageId;\r\n\r\n        this.client.publish(type, message, headers);\r\n\r\n        if (timeout !== null) {\r\n            this.requestReplyCallbacks[messageId].timeout = setTimeout(() => {\r\n                if (this.requestReplyCallbacks[messageId]){\r\n                    clearTimeout(this.requestReplyCallbacks[messageId].timeout);\r\n                    delete this.requestReplyCallbacks[messageId];\r\n                }\r\n            }, timeout);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback called when consuming a message.  Calls handler callbacks.\r\n     * @param  {Object} message\r\n     * @param  {Object} headers\r\n     * @param  {string} type\r\n     * @return  {Object} result\r\n     */\r\n    _consumeMessage(message, headers, type){\r\n        let result = {\r\n            success: true\r\n        };\r\n        try {\r\n            this._processHandlers(message, headers, type);\r\n            this._processRequestReplies(message, headers, type);\r\n        } catch(e) {\r\n            result = {\r\n                exception: e,\r\n                success: false\r\n            };\r\n            this.emit(\"error\", e);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Finds all handlers interested in the message type and calls handler callback function.\r\n     * @param  {Object} message\r\n     * @param  {Object} headers\r\n     * @param  {string} type\r\n     */\r\n    _processHandlers(message, headers, type) {\r\n        var handlers = this.config.handlers[type];\r\n\r\n        if (this.config.handlers[\"*\"] !== undefined && this.config.handlers[\"*\"] !== null){\r\n            handlers = [...handlers, ...this.config.handlers[\"*\"]];\r\n        }\r\n\r\n        if (handlers){\r\n            var replyCallback = this._getReplyCallback(headers);\r\n            handlers.map(handler => handler(message, headers, type, replyCallback));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Finds the callback passed to sendRequest or publishRequest and calls it.\r\n     * @param  {Object} message\r\n     * @param  {Object} headers\r\n     * @param  {Object} type\r\n     */\r\n    _processRequestReplies(message, headers, type) {\r\n        if (headers[\"ResponseMessageId\"]){\r\n            var configuration = this.requestReplyCallbacks[headers[\"ResponseMessageId\"]];\r\n            if (configuration){\r\n                configuration.callback(message, type, headers);\r\n                configuration.processedCount++;\r\n                if (configuration.processedCount >= configuration.endpointCount){\r\n                    if (this.requestReplyCallbacks[headers[\"ResponseMessageId\"]].timeout){\r\n                        clearTimeout(this.requestReplyCallbacks[headers[\"ResponseMessageId\"]].timeout);\r\n                    }\r\n                    delete this.requestReplyCallbacks[headers[\"ResponseMessageId\"]];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a reply function to be used by handlers.  The reply function will set the ResponseMessageId in the\r\n     * headers and send the reply back to the source address.\r\n     * @param {Object} headers\r\n     * @return {function(*=, *=)}\r\n     * @private\r\n     */\r\n    _getReplyCallback(headers) {\r\n        return (type, message) => {\r\n            headers[\"ResponseMessageId\"] = headers[\"RequestMessageId\"];\r\n            this.send(headers[\"SourceAddress\"], type, message, headers);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes of Bus resources.\r\n     */\r\n    close(){\r\n        this.client.close();\r\n    }\r\n}\r\n"]}