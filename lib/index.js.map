{"version":3,"sources":["../src/index.js"],"names":["Bus","config","id","init","bind","_consumeMessage","addHandler","removeHandler","send","publish","_processHandlers","isHandled","on","console","log","requestReplyCallbacks","cb","client","connect","emit","ex","message","callback","type","replace","consumeType","handlers","push","filter","c","undefined","length","removeType","endpoint","headers","messageId","endpoints","Array","isArray","endpointCount","processedCount","expected","timeout","setTimeout","clearTimeout","Promise","resolve","reject","promises","_processRequestReplies","e","exception","success","all","then","res","catch","err","replyCallback","_getReplyCallback","map","h","promise","configuration","close"],"mappings":"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","file":"index.js","sourcesContent":["import settings from './settings';\nimport {mergeDeep, guid} from './utils';\nimport EventEmitter from 'events';\n\n/** Class representing a the message bus. */\nexport class Bus extends EventEmitter {\n\n    /**\n     * Sets config and creates client\n     * @constructor\n     * @param  {Object} config\n     */\n    constructor(config) {\n        super();\n        this.id = guid();\n        this.config = mergeDeep(settings(), config);\n        this.init = this.init.bind(this);\n        this._consumeMessage = this._consumeMessage.bind(this);\n        this.addHandler = this.addHandler.bind(this);\n        this.removeHandler = this.removeHandler.bind(this);\n        this.send = this.send.bind(this);\n        this.publish = this.publish.bind(this);\n        this._processHandlers = this._processHandlers.bind(this);\n        this.isHandled = this.isHandled.bind(this);\n        this.on('error', console.log);\n        this.requestReplyCallbacks = {};\n    }\n\n    /**\n     * Creates AMQP client and fires connected event when client has connected\n     */\n    init(cb) {\n        this.client = new this.config.client(this.config, this._consumeMessage);\n        this.client.connect();\n        this.client.on(\"connected\", () => {\n            this.emit(\"connected\");\n            if(cb) cb();\n        });\n        this.client.on(\"error\", ex => this.emit(\"error\", ex));\n        return this;\n    }\n\n    /**\n     * Starts consuming the message type and binds the callback to the message type.\n     * @param {String} message\n     * @param  {Function} callback\n     */\n    addHandler(message, callback){\n        var type = message.replace(/\\./g, \"\");\n        if(type !== \"*\"){\n            this.client.consumeType(type);\n        }\n        this.config.handlers[message] = this.config.handlers[message] || [];\n        this.config.handlers[message].push(callback);\n    }\n\n    /**\n     * Removes the message type callback binding and stops listening for the message if there are no more callback\n     * bindings.\n     * @param {String} message\n     * @param  {Function} callback\n     */\n    removeHandler(message, callback){\n        if (this.config.handlers[message]){\n            this.config.handlers[message] = this.config\n                .handlers[message]\n                .filter(c => c !== callback);\n\n            if (message !== \"*\" && (this.config.handlers[message] === undefined ||\n                                    this.config.handlers[message].length === 0)){\n                this.client.removeType(message.replace(/\\./g, \"\"));\n            }\n        }\n    }\n\n    /**\n     * Checks if the message type is being handled by the Bus.\n     * @param {String} message\n     * @return {Boolean}\n     */\n    isHandled(message) {\n        return this.config.handlers[message] !== undefined && this.config.handlers[message].length !== 0;\n    }\n\n    /**\n     * Sends a command to the specified endpoint(s).\n     * @param {String|Array} endpoint\n     * @param  {String} type\n     * @param  {Object} message\n     * @param  {Object|undefined} headers\n     */\n    send(endpoint, type, message, headers = {}){\n        this.client.send(endpoint, type, message, headers);\n    }\n\n    /**\n     * Published an event of the specified type.\n     * @param  {String} type\n     * @param  {Object} message\n     * @param  {Object|undefined} headers\n     */\n    publish(type, message, headers = {}){\n        this.client.publish(type, message, headers);\n    }\n\n    /**\n     * Sends a command to the specified endpoint(s) and waits for one or more replies.\n     * The method behaves like a regular blocking RPC method.\n     * @param {string|Array} endpoint\n     * @param {string} type\n     * @param {Object} message\n     * @param {function} callback\n     * @param {Object|undefined} headers\n     */\n    sendRequest(endpoint, type, message, callback, headers ={}){\n        var messageId = guid();\n\n        let endpoints = Array.isArray(endpoint) ? endpoint : [endpoint];\n\n        this.requestReplyCallbacks[messageId] = {\n            endpointCount: endpoints.length,\n            processedCount: 0,\n            callback\n        };\n        headers[\"RequestMessageId\"] = messageId;\n        this.client.send(endpoint, type, message, headers);\n    }\n\n    /**\n     * Publishes an event and wait for replies.\n     * @param {string} type\n     * @param {Object} message\n     * @param {function} callback\n     * @param {int|null} expected\n     * @param {int|null} timeout\n     * @param {Object|null} headers\n     */\n    publishRequest(type, message, callback, expected = null, timeout = 10000, headers ={}){\n        var messageId = guid();\n\n        this.requestReplyCallbacks[messageId] = {\n            endpointCount: expected === null ? -1 : expected,\n            processedCount: 0,\n            callback\n        };\n        headers[\"RequestMessageId\"] = messageId;\n\n        this.client.publish(type, message, headers);\n\n        if (timeout !== null) {\n            this.requestReplyCallbacks[messageId].timeout = setTimeout(() => {\n                if (this.requestReplyCallbacks[messageId]){\n                    clearTimeout(this.requestReplyCallbacks[messageId].timeout);\n                    delete this.requestReplyCallbacks[messageId];\n                }\n            }, timeout);\n        }\n    }\n\n    /**\n     * Callback called when consuming a message.  Calls handler callbacks.\n     * @param  {Object} message\n     * @param  {Object} headers\n     * @param  {string} type\n     * @return  {Object} result\n     */\n     _consumeMessage(message, headers, type){\n        return new Promise((resolve, reject) => {\n\n          let promises = [];\n          try {\n              promises = [\n                ...this._processHandlers(message, headers, type),\n                this._processRequestReplies(message, headers, type)\n              ];\n          } catch(e) {\n              this.emit(\"error\", e);\n              reject({\n                exception: e,\n                success: false\n              });\n              return;\n          }\n\n          Promise.all(promises)\n            .then(res => resolve(res))\n            .catch(err => {\n              this.emit(\"error\", err);\n              reject({\n                exception: err,\n                success: false\n              });\n            });\n        });\n    }\n\n    /**\n     * Finds all handlers interested in the message type and calls handler callback function.\n     * @param  {Object} message\n     * @param  {Object} headers\n     * @param  {string} type\n     */\n    _processHandlers(message, headers, type) {\n        let handlers = this.config.handlers[type] || [], promises = [];\n\n        if (this.config.handlers[\"*\"] !== undefined && this.config.handlers[\"*\"] !== null){\n            handlers = [...handlers, ...this.config.handlers[\"*\"]];\n        }\n\n        if (handlers.length > 0){\n            var replyCallback = this._getReplyCallback(headers);\n            promises = handlers.map(h => h(message, headers, type, replyCallback));\n        }\n\n        return promises;\n    }\n\n    /**\n     * Finds the callback passed to sendRequest or publishRequest and calls it.\n     * @param  {Object} message\n     * @param  {Object} headers\n     * @param  {Object} type\n     */\n     _processRequestReplies(message, headers, type) {\n        let promise = null;\n        if (headers[\"ResponseMessageId\"]){\n            let configuration = this.requestReplyCallbacks[headers[\"ResponseMessageId\"]];\n            if (configuration){\n                promise = configuration.callback(message, type, headers);\n                configuration.processedCount++;\n                if (configuration.processedCount >= configuration.endpointCount){\n                    if (this.requestReplyCallbacks[headers[\"ResponseMessageId\"]].timeout){\n                        clearTimeout(this.requestReplyCallbacks[headers[\"ResponseMessageId\"]].timeout);\n                    }\n                    delete this.requestReplyCallbacks[headers[\"ResponseMessageId\"]];\n                }\n            }\n        }\n        return promise;\n    }\n\n    /**\n     * Returns a reply function to be used by handlers.  The reply function will set the ResponseMessageId in the\n     * headers and send the reply back to the source address.\n     * @param {Object} headers\n     * @return {function(*=, *=)}\n     * @private\n     */\n    _getReplyCallback(headers) {\n        return (type, message) => {\n            headers[\"ResponseMessageId\"] = headers[\"RequestMessageId\"];\n            this.send(headers[\"SourceAddress\"], type, message, headers);\n        }\n    }\n\n    /**\n     * Disposes of Bus resources.\n     */\n    close(){\n        this.client.close();\n    }\n}\n"]}