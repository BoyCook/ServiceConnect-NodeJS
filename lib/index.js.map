{"version":3,"sources":["../src/index.js"],"names":["Bus","config","_consumeMessage","bind","addHandler","removeHandler","send","publish","_processHandlers","isHandled","on","console","log","cb","client","connect","emit","ex","message","callback","type","replace","consumeType","handlers","push","filter","c","undefined","length","removeType","endpoint","headers","result","exception","success","map","handler","e","close"],"mappings":"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","file":"index.js","sourcesContent":["import settings from './settings';\r\nimport {mergeDeep} from './utils';\r\nimport EventEmitter from 'events';\r\n\r\n/** Class representing a the message bus. */\r\nexport class Bus extends EventEmitter {\r\n\r\n    /**\r\n     * Sets config and creates client\r\n     * @constructor\r\n     * @param  {Object} config\r\n     */\r\n    constructor(config) {\r\n        super();\r\n        this.config = mergeDeep(settings, config);\r\n        this._consumeMessage = this._consumeMessage.bind(this);\r\n        this.addHandler = this.addHandler.bind(this);\r\n        this.removeHandler = this.removeHandler.bind(this);\r\n        this.send = this.send.bind(this);\r\n        this.publish = this.publish.bind(this);\r\n        this._processHandlers = this._processHandlers.bind(this);\r\n        this.isHandled = this.isHandled.bind(this);\r\n        this.on('error', console.log);\r\n    }\r\n\r\n    /**\r\n     * Creates AMQP client and fires connected event when client has connected\r\n     */\r\n    init(cb) {\r\n        this.client = new this.config.client(this.config, this._consumeMessage);\r\n        this.client.connect();\r\n        this.client.on(\"connected\", () => {\r\n            this.emit(\"connected\");\r\n            if(cb) cb();\r\n        });\r\n        this.client.on(\"error\", ex => this.emit(\"error\", ex));\r\n    }\r\n\r\n    /**\r\n     * Starts consuming the message type and binds the callback to the message type.\r\n     * @param {String} message\r\n     * @param  {Function} callback\r\n     */\r\n    addHandler(message, callback){\r\n        var type = message.replace(/\\./g, \"\");\r\n        this.client.consumeType(type);\r\n        this.config.handlers[message] = this.config.handlers[message] || [];\r\n        this.config.handlers[message].push(callback);\r\n    }\r\n\r\n    /**\r\n     * Removes the message type callback binding and stops listening for the message if there are no more callback\r\n     * bindings.\r\n     * @param {String} message\r\n     * @param  {Function} callback\r\n     */\r\n    removeHandler(message, callback){\r\n        if (this.config.handlers[message]){\r\n            this.config.handlers[message] = this.config\r\n                .handlers[message]\r\n                .filter(c => c !== callback);\r\n\r\n            if (this.config.handlers[message] === undefined || this.config.handlers[message].length === 0){\r\n                this.client.removeType(message.replace(/\\./g, \"\"));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the message type is being handled by the Bus.\r\n     * @param {String} message\r\n     * @return {Boolean}\r\n     */\r\n    isHandled(message) {\r\n        return this.config.handlers[message] !== undefined && this.config.handlers[message].length !== 0;\r\n    }\r\n\r\n    /**\r\n     * Sends a command to the specified endpoint(s).\r\n     * @param {String|Array} endpoint\r\n     * @param  {String} type\r\n     * @param  {Object} message\r\n     * @param  {Object|undefined} headers\r\n     */\r\n    send(endpoint, type, message, headers = {}){\r\n        this.client.send(endpoint, type, message, headers);\r\n    }\r\n\r\n    /**\r\n     * Published an event of the specified type.\r\n     * @param  {String} type\r\n     * @param  {Object} message\r\n     * @param  {Object|undefined} headers\r\n     */\r\n    publish(type, message, headers = {}){\r\n        this.client.publish(type, message, headers);\r\n    }\r\n\r\n    /**\r\n     * Callback called when consuming a message.  Calls handler callbacks.\r\n     * @param  {Object} message\r\n     * @param  {Object} headers\r\n     * @param  {Object} type\r\n     * @return  {Object} result\r\n     */\r\n    _consumeMessage(message, headers, type){\r\n        let result;\r\n        try {\r\n            result = this._processHandlers(message, headers, type);\r\n        } catch(ex) {\r\n            result = {\r\n                exception: ex,\r\n                success: false\r\n            };\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Finds all handlers interested in the message type and calls handler callback function.\r\n     * @param  {Object} message\r\n     * @param  {Object} headers\r\n     * @param  {String} type\r\n     * @return {Object} result\r\n     */\r\n    _processHandlers(message, headers, type) {\r\n        var handlers = this.config.handlers[type],\r\n            result = { success: true };\r\n        if (handlers){\r\n            handlers.map(handler => {\r\n                try {\r\n                    handler(message, headers, type);\r\n                } catch(e) {\r\n                    result.success = false;\r\n                    result.exception = e;\r\n                    this.emit(\"error\", e);\r\n                }\r\n            });\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Disposes of Bus resources.\r\n     */\r\n    close(){\r\n        this.client.close();\r\n    }\r\n}\r\n"]}